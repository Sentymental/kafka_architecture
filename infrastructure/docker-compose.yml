version: "3"

services:
  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT}:9092
      - ${KAFKA_LOCALHOST_PORT}:9093
    environment:
      - KAFKA_BROKER_ID: 1
      - KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      - KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,PLAINTEXT://0.0.0.0:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      - KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      - KAFKA_MESSAGE_MAX_BYTES: 10485760
      - KAFKA_SOCKET_REQUEST_MAX_BYTES: 100001200
    restart: always
    volumes:
      - ./kafka-data:/var/lib/kafka/data

  zookeeper:
    image: zookeeper:${ZK_VERSION}
    ports:
      - ${ZK_PORT}:2181
    restart: always
    volumes:
      - ./zk-data:/var/lib/zookeeper/data \
      - ./zk-txn-logs:/var/lib/zookeeper/log \

  kafka-actualizer:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    depends_on:
      - kafka
    volumes:
      - ./docker/start-script.sh:/start-script.sh
    command:
      bash -c '/start-script.sh --timeout=0 -s kafka:9092 && \
      kafka-topics --create --if-not-exists --topic src-data --partitions 8 --replication-factor 1 --zookeeper zookeeper:2181 && \
      kafka-topics --create --if-not-exists --topic processed-data --partitions 8 --replication-factor 1 --zookeeper zookeeper:2181 && \
      kafka-topics --create --if-not-exists --topic aggregated-data --partitions 8 --replication-factor 1 --zookeeper zookeeper:2181 && \
      exit 0'
    environment:
      - KAFKA_BROKER_ID: ignored
      - KAFKA_ZOOKEEPER_CONNECT: ignored

  db:
    image: postgres:${PG_VERSION}
    environment:
      - POSTGRES_DB: ${DB_NAME}
      - POSTGRES_USER: ${DB_USERNAME}
      - POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./postgres-data:/var/lib/postgresql
    ports:
      - ${DB_PORT}:5432
    restart: always

  pgadmin:
    image: chorss/docker-pgadmin4
    restart: always
    volumes:
      - ./pgadmin:/data
    ports:
      - ${PG_ADMIN_PORT}:5050
    depends_on:
      - db


  grafana:
